# -*- coding: utf-8 -*-
"""
test_4th_order

Created on 2018-02-12 by hbldh <henrik.blidh@nedomkull.com>

"""

import pytest
from dlxsudoku import Sudoku


s1 = """
# Fourth order Sudoku
0 15 0 1 0 2 10 14 12 0 0 0 0 0 0 0
0 6 3 16 12 0 8 4 14 15 1 0 2 0 0 0
14 0 9 7 11 3 15 0 0 0 0 0 0 0 0 0
4 13 2 12 0 0 0 0 6 0 0 0 0 15 0 0
0 0 0 0 14 1 11 7 3 5 10 0 0 8 0 12
3 16 0 0 2 4 0 0 0 14 7 13 0 0 5 15
11 0 5 0 0 0 0 0 0 9 4 0 0 6 0 0
0 0 0 0 13 0 16 5 15 0 0 12 0 0 0 0
0 0 0 0 9 0 1 12 0 8 3 10 11 0 15 0
2 12 0 11 0 0 14 3 5 4 0 0 0 0 9 0
6 3 0 4 0 0 13 0 0 11 9 1 0 12 16 2
0 0 10 9 0 0 0 0 0 0 12 0 8 0 6 7
12 8 0 0 16 0 0 10 0 13 0 0 0 5 0 0
5 0 0 0 3 0 4 6 0 1 15 0 0 0 0 0
0 9 1 6 0 14 0 11 0 0 2 0 0 0 10 8
0 14 0 0 0 13 9 0 4 12 11 8 0 0 2 0
""".strip()

s1_solution = """
 8 15 11 1 6 2 10 14 12 7 13 3 16 9 4 5
 10 6 3 16 12 5 8 4 14 15 1 9 2 11 7 13
 14 5 9 7 11 3 15 13 8 2 16 4 12 10 1 6
 4 13 2 12 1 9 7 16 6 10 5 11 3 15 8 14
 9 2 6 15 14 1 11 7 3 5 10 16 4 8 13 12
 3 16 12 8 2 4 6 9 11 14 7 13 10 1 5 15
 11 10 5 13 8 12 3 15 1 9 4 2 7 6 14 16
 1 4 7 14 13 10 16 5 15 6 8 12 9 2 3 11
 13 7 16 5 9 6 1 12 2 8 3 10 11 14 15 4
 2 12 8 11 7 16 14 3 5 4 6 15 1 13 9 10
 6 3 14 4 10 15 13 8 7 11 9 1 5 12 16 2
 15 1 10 9 4 11 5 2 13 16 12 14 8 3 6 7
 12 8 4 3 16 7 2 10 9 13 14 6 15 5 11 1
 5 11 13 2 3 8 4 6 10 1 15 7 14 16 12 9
 7 9 1 6 15 14 12 11 16 3 2 5 13 4 10 8
 16 14 15 10 5 13 9 1 4 12 11 8 6 7 2 3
""".strip()


s1_string_representation = """# Fourth order Sudoku
+------------------+------------------+------------------+------------------+
|   *  15   *   1  |   *   2  10  14  |  12   *   *   *  |   *   *   *   *  |
|   *   6   3  16  |  12   *   8   4  |  14  15   1   *  |   2   *   *   *  |
|  14   *   9   7  |  11   3  15   *  |   *   *   *   *  |   *   *   *   *  |
|   4  13   2  12  |   *   *   *   *  |   6   *   *   *  |   *  15   *   *  |
+------------------+------------------+------------------+------------------+
|   *   *   *   *  |  14   1  11   7  |   3   5  10   *  |   *   8   *  12  |
|   3  16   *   *  |   2   4   *   *  |   *  14   7  13  |   *   *   5  15  |
|  11   *   5   *  |   *   *   *   *  |   *   9   4   *  |   *   6   *   *  |
|   *   *   *   *  |  13   *  16   5  |  15   *   *  12  |   *   *   *   *  |
+------------------+------------------+------------------+------------------+
|   *   *   *   *  |   9   *   1  12  |   *   8   3  10  |  11   *  15   *  |
|   2  12   *  11  |   *   *  14   3  |   5   4   *   *  |   *   *   9   *  |
|   6   3   *   4  |   *   *  13   *  |   *  11   9   1  |   *  12  16   2  |
|   *   *  10   9  |   *   *   *   *  |   *   *  12   *  |   8   *   6   7  |
+------------------+------------------+------------------+------------------+
|  12   8   *   *  |  16   *   *  10  |   *  13   *   *  |   *   5   *   *  |
|   5   *   *   *  |   3   *   4   6  |   *   1  15   *  |   *   *   *   *  |
|   *   9   1   6  |   *  14   *  11  |   *   *   2   *  |   *   *  10   8  |
|   *  14   *   *  |   *  13   9   *  |   4  12  11   8  |   *   *   2   *  |
+------------------+------------------+------------------+------------------+
""".strip()


s2 = """# https://krazydad.com/hexsudoku/sfiles/KD_HexSudoku_STH_8_v27.pdf #1
3 * b * 8 2 7 f * * 6 * * 0 * *
6 9 * * * 1 * * * * * e * * 8 2
* * * * 4 * * * * * * * d 9 6 *
* c 1 * * 3 9 6 * * 2 d 7 * * *
* * c 5 * * * * b * * * * 1 * *
b * * * * * * * 4 0 * * 2 * f 8
* 7 a * c * e * * d * * 4 * * *
d * * * * 8 4 * 1 * c 9 * * * e
8 * * * e 0 * 4 * 2 3 * * * * 7
* * * c * * 6 * * 7 * 0 * 2 3 *
2 0 * 6 * * d a * * * * * * * b
* * 9 * * * * 3 * * * * e 6 * *
* * * 8 0 6 * * 2 c e * * d a *
* b 6 7 * * * * * * * 3 * * * *
1 a * * 9 * * * * * b * * * 7 0
* * 0 * * b * * 5 9 d f * 4 * 6
""".strip()


def test_parsing_s1():
    order, comment, matrix = Sudoku._parse_from_string(s1)
    assert order == 4
    assert comment == "# Fourth order Sudoku"
    assert len(matrix) == 16
    assert len(matrix[0]) == 16


def test_solving_s1():
    _, _, solution = Sudoku._parse_from_string(s1_solution)
    s = Sudoku(s1)
    s.solve()
    assert s.is_solved
    assert s._matrix == solution


def test_string_representation_s1():
    s = Sudoku(s1)
    string_rep = str(s)
    assert string_rep == s1_string_representation


def test_parsing_s2():
    order, comment, matrix = Sudoku._parse_from_string(s2)
    assert order == 4
    assert comment == "# https://krazydad.com/hexsudoku/sfiles/KD_HexSudoku_STH_8_v27.pdf #1"
    assert len(matrix) == 16
    assert len(matrix[0]) == 16


def test_solving_s2():
    s = Sudoku(s2)
    s.solve()
    assert s.is_solved